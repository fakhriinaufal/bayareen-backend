// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import categories "bayareen-backend/features/categories"
import mock "github.com/stretchr/testify/mock"

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Data) Create(_a0 categories.Core) (categories.Core, error) {
	ret := _m.Called(_a0)

	var r0 categories.Core
	if rf, ok := ret.Get(0).(func(categories.Core) categories.Core); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(categories.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(categories.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Data) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Data) GetAll() []categories.Core {
	ret := _m.Called()

	var r0 []categories.Core
	if rf, ok := ret.Get(0).(func() []categories.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]categories.Core)
		}
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *Data) GetById(id int) (categories.Core, error) {
	ret := _m.Called(id)

	var r0 categories.Core
	if rf, ok := ret.Get(0).(func(int) categories.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(categories.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *Data) GetByName(name string) (categories.Core, error) {
	ret := _m.Called(name)

	var r0 categories.Core
	if rf, ok := ret.Get(0).(func(string) categories.Core); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(categories.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Data) Update(_a0 categories.Core) (categories.Core, error) {
	ret := _m.Called(_a0)

	var r0 categories.Core
	if rf, ok := ret.Get(0).(func(categories.Core) categories.Core); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(categories.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(categories.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
