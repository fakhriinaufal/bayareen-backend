// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transaction "bayareen-backend/features/transaction"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Data) Create(_a0 *transaction.Core) (*transaction.Core, error) {
	ret := _m.Called(_a0)

	var r0 *transaction.Core
	if rf, ok := ret.Get(0).(func(*transaction.Core) *transaction.Core); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: userId
func (_m *Data) GetByUserId(userId int) ([]transaction.Core, error) {
	ret := _m.Called(userId)

	var r0 []transaction.Core
	if rf, ok := ret.Get(0).(func(int) []transaction.Core); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Data) Update(_a0 *transaction.Core) (*transaction.Core, error) {
	ret := _m.Called(_a0)

	var r0 *transaction.Core
	if rf, ok := ret.Get(0).(func(*transaction.Core) *transaction.Core); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByReferenceId provides a mock function with given fields: _a0
func (_m *Data) UpdateByReferenceId(_a0 *transaction.Core) (*transaction.Core, error) {
	ret := _m.Called(_a0)

	var r0 *transaction.Core
	if rf, ok := ret.Get(0).(func(*transaction.Core) *transaction.Core); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
